version: 2.0

build_jobs: &build_jobs
  jobs:
    - build-amd64
    - build-arm64
    - build-armhf
    - push-manifest:
        requires:
          - build-amd64
          - build-arm64
          - build-armhf

workflows:
  version: 2
  commit:
    <<: *build_jobs
  nightly:
    <<: *build_jobs
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master

shared: &shared
  docker:
    - image: docker:stable-git
  steps:
    - checkout
    - setup_remote_docker

    - run:
        name: Install build dependencies.
        command: apk add --no-cache bash curl jq make sudo

    - run:
        # Unforunately, there's no easy way to "merge" anchors/references
        # according to the # YAML 1.2 spec. So, the recommended way to handle
        # this is to dump your # values into a file and source it at build time.
        # @see e.g., https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables
        name: Set up shared environment vars.
        command: |
          .circleci/load_env.sh

    - run:
        name: Update Go version.
        command: |
          source "$BASH_ENV"
          .circleci/install_go.sh

    - run:
        name: Install glide.
        command: |
          curl -sL https://github.com/Masterminds/glide/releases/download/v0.13.1/glide-v0.13.1-linux-amd64.tar.gz | tar xz
          chmod +x linux-amd64/glide
          mv linux-amd64/glide /usr/bin/glide

    - run:
        name: Clone repo.
        command: |
          source "$BASH_ENV"
          mkdir -p "$PROJECT_PATH"
          git clone "https://github.com/${GITHUB_REPO}" --depth=1 "$PROJECT_PATH" &>/dev/null

    - restore_cache:
        keys:
          - glide-{{ checksum "/root/go/src/k8s.io/helm/glide.yaml" }}-{{ checksum "/root/go/src/k8s.io/helm/glide.lock" }}
          - glide-

    - run:
        name: Bootstrap repo dependencies.
        command: |
          source "$BASH_ENV"
          cd "$PROJECT_PATH" && make bootstrap

    - save_cache:
        key: glide-{{ checksum "/root/go/src/k8s.io/helm/glide.yaml" }}-{{ checksum "/root/go/src/k8s.io/helm/glide.lock" }}
        paths:
          - /home/circleci/.glide

    - run:
        name: Compile architecture-specific tiller binary.
        command: |
          source "$BASH_ENV"
          cd "$PROJECT_PATH"
          # Go won't let us cross-compile if GOBIN is set.
          sed -e 's/GOBIN=$(BINDIR) //' -i Makefile
          make build
          cp /root/go/bin/tiller "$DIR"

    - run:
        name: Build and push Docker image.
        command: |
          .circleci/push-multiarch.sh

jobs:
  build-amd64:
    <<: *shared
    environment:
      GOARCH: amd64
      TARGET: amd64
  build-arm64:
    <<: *shared
    environment:
      GOARCH: arm64
      TARGET: arm64v8
  build-armhf:
    <<: *shared
    environment:
      GOARCH: arm
      TARGET: arm32v7

  # =======================================
  # ---------------------------------------
  # =======================================

  push-manifest:
    docker:
      - image: docker:stable-git
    environment:
      GITHUB_REPO: kubernetes/helm
      IMAGE: tiller
      REGISTRY: jessestuart
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Determine repo version.
          command: |
            apk add --no-cache bash curl jq
            curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r ".tag_name" > ~/VERSION

      - run:
          name: Install manifest-tool.
          command: |
            export VERSION=$(cat ~/VERSION)
            echo "Downloading manifest-tool."
            wget https://github.com/estesp/manifest-tool/releases/download/v0.7.0/manifest-tool-linux-amd64
            mv manifest-tool-linux-amd64 /usr/bin/manifest-tool
            chmod +x /usr/bin/manifest-tool
            manifest-tool --version

      - run:
          name: Push Docker manifest.
          command: |
            export VERSION=$(cat ~/VERSION)
            echo "Pushing manifest "$REGISTRY/$IMAGE":latest"
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin;
            manifest-tool push from-args \
              --platforms linux/arm,linux/arm64,linux/amd64 \
              --template "$REGISTRY/$IMAGE:$VERSION-ARCH" \
              --target "$REGISTRY/$IMAGE:latest"
            manifest-tool push from-args \
              --platforms linux/arm,linux/arm64,linux/amd64 \
              --template "$REGISTRY/$IMAGE:$VERSION-ARCH" \
              --target "$REGISTRY/$IMAGE:$VERSION"
      - run:
          name: Verify manifest was persisted remotely.
          command: |
            export VERSION=$(cat ~/VERSION)
            manifest-tool inspect "$REGISTRY/$IMAGE:$VERSION"
